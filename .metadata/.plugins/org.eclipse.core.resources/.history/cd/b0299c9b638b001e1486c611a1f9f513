package evaluation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import bbs.Bbs;
import util.DatabaseUtil;




public class EvaluationDAO {
	Connection conn = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	
	public int write(EvaluationDTO evaluationDTO) {	//사용자가 강의평가를 기록하게 해주는 함수
		String SQL = "INSERT INTO EVALUATION VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0)"; //auto increment가 적용되어 있으므로 null 값 넣음
		try {
			conn = DatabaseUtil.getConnection();
			pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, evaluationDTO.getUserID());   
			pstmt.setString(2, evaluationDTO.getLectureName());   
			pstmt.setString(3, evaluationDTO.getProfessorName());   
			pstmt.setInt(4, evaluationDTO.getLectureYear());   
			pstmt.setString(5, evaluationDTO.getSemesterDivide());   
			pstmt.setString(6, evaluationDTO.getLectureDivide());   
			pstmt.setString(7, evaluationDTO.getEvaluationTitle());   
			pstmt.setString(8, evaluationDTO.getEvaluationContent());   
			pstmt.setString(9, evaluationDTO.getTotalScore());   
			pstmt.setString(10, evaluationDTO.getCreditScore());   
			pstmt.setString(11, evaluationDTO.getComfortableScore());   
			pstmt.setString(12, evaluationDTO.getLectureScore());   
			return pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (conn != null)
					conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return -1; // 데이터베이스 오류
	}
	
	public ArrayList<EvaluationDTO> getList(int pageNumber){
		String SQL = "SELECT * FROM evaluation ";
		ArrayList<Bbs> list = new ArrayList<Bbs>();
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				EvaluationDTO evaluationDTO = new EvaluationDTO(evaluationID, userID, lectureName, professorName, lectureYear, semesterDivide, lectureDivide, evaluationTitle, evaluationContent, totalScore, creditScore, comfortableScore, lectureScore, likeCount);
				dto.setString(1, evaluationDTO.getUserID());   
				dto.setString(2, evaluationDTO.getLectureName());   
				dto.setString(3, evaluationDTO.getProfessorName());   
				dto.setInt(4, evaluationDTO.getLectureYear());   
				dto.setString(5, evaluationDTO.getSemesterDivide());   
				dto.setString(6, evaluationDTO.getLectureDivide());   
				dto.setString(7, evaluationDTO.getEvaluationTitle());   
				dto.setString(8, evaluationDTO.getEvaluationContent());   
				dto.setString(9, evaluationDTO.getTotalScore());   
				dto.setString(10, evaluationDTO.getCreditScore());   
				dto.setString(11, evaluationDTO.getComfortableScore());   
				dto.setString(12, evaluationDTO.getLectureScore());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
		
	}
}
